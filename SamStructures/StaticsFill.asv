function [t_good,material,masses] = StaticsFill(structures,dim)
% Check each structure, make sure the panels and cylinders can survive
% buckling or not. 

%Edited 6/20/16
%Editor Name: Samuel Wu 
%NetID: scw223

% Initially idealize spacecraft in launch config. as a cantilevered hollow
% cylinder with uniform thickness 

%newdesign = structures;

% Get material parameters 
material = MaterialTable();

% Rigidity requirement 
fnat_lat = 10; % Lateral natural frequency (Hz)
fnat_ax = 25; % Axial natural frequency (Hz)

% Factors of safety for ultimate and yielding strength 
fos_ult = 100;
fos_yield = 75;

% Load factors requirement (multiple of weight on Earth)
% May need to change these assumptions
loadf_ax = 6.5;
loadf_lat = 3.0;
loadf_bend = 3.0;

% Pressure requirement (SMAD uses this number for example, change later?)
pressure = 6889;    %(Pa)

MS = 0;
mass = inf;
cost = inf;
struct_vol = zeros(1,6);
for i = 1:10;
    % Calculating parameters
    for k = 1:6
    struct_vol(k) = structures.structures(k).Dim(1).*structures.structures(k).Dim(2).*structures.structures(k).Dim(3);
    end
    t_int = dim(4);
    A_const = sum(struct_vol)/t_int;
    mB = structures.componentsMass+2*sum(struct_vol)*material(i).Density;    %inc. allocation for structure
    weight = mB*9.81;
    R = dim(2)/2;
    
    % Sizing for rigidity
    % Assuming case C & D of SMAD (pg 484) 
    % Axial rigidity
    A_req = (fnat_ax/.250)^2*(mB*R/material(i).E);
    t_ax = A_req/(2*pi*R);
    
    % Lateral rigidity
    I_req = (fnat_lat/.560)^2*(mB*R^3/material(i).E);
    t_lat = I_req/(pi*R^3);
    
    % Calculating limit load of spacecraft
    dist_CG = dim(3);
    limit_axial = weight*loadf_ax;
    limit_lat = weight*loadf_lat;
    limit_bend = weight*dist_CG*loadf_bend;
    
    % Calculating equivalent axial load: Peq = Paxial + 2M/R
    Peq = limit_axial + 2*limit_bend/R;
    ult_load = Peq*fos_ult;
    yield_load = Peq*fos_yield;

    % Sizing for tensile strength (using A = 2*pi*R*t
    t_ult = Peq/(material(i).F_ult*2*pi*R);
    t_yield = Peq/(material(i).F_yield*2*pi*R);
    t_vect = [t_ult t_yield t_ax t_lat];
    t_req = max(t_vect);
    MS_new = 0;

    % Sizing for stability (compressive strength)
    while MS_new - 1 < 0
        phi = sqrt(R/t_req)/16;
        gamma = 1.0 - 0.901*(1.0-exp(-phi));
        sig_cr = (0.6.*gamma.*material(i).E.*t_req)/R;
        Pcr = 2*pi.*R.*t_req.*sig_cr;
        MS_new = Pcr./ult_load;
        mass_new = A_const.*t_req.*material(i).Density;
        cost_new = mass_new*material(i).Cost;
        t_req = t_req.*1.05;
    end
    if MS_new >= MS && mass_new < mass && cost_new < cost
        mat_i = i;
        MS = MS_new;
        mass = mass_new;
        cost = cost_new;
        t_good = t_req./1.05;
    end
end

% newdesign.structures(1).Dim(3) = t_good;
% newdesign.structures(2).Dim(2) = t_good;
% newdesign.structures(3).Dim(2) = t_good;
% newdesign.structures(4).Dim(2) = t_good;
% newdesign.structures(5).Dim(2) = t_good;
% newdesign.structures(6).Dim(1) = t_good;
material = material(mat_i).Name;
masses = zeros(length(1:6)
for j = 1:6
    newdesign.structures(j).Mass = newdesign.structures(j).Dim(1)...
        *newdesign.structures(j).Dim(2)*newdesign.structures(j).Dim(3)*material(mat_i).Density;
    %newdesign.structures(j).Material = material(mat_i).Name;
end

newdesign.structuresMass = sum([newdesign.structures.Mass]);
newdesign.structuresCost = newdesign.structuresMass*material(mat_i).Cost;
newdesign.totalMass = newdesign.structuresMass + structures.componentsMass;
        

end


